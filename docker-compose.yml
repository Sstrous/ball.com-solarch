version: "2.27.0"
services:
  rabbitmq:
    image: rabbitmq:management
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      rabbitmq:


  customers:
    build:
      context: ./customers
      dockerfile: Dockerfile
    restart: on-failure
    volumes:
      - ./libs:/libs
    ports:
      - 3001:3000
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
    networks:
      rabbitmq:
      mongo-customers:
  mongo-customers:
    image: mongo
    volumes:
      - /data/customers
    networks:
      mongo-customers:

  orders:
    build:
      context: ./orders
      dockerfile: Dockerfile
    restart: on-failure
    volumes:
      - ./libs:/libs
    ports:
      - 3002:3000
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
    networks:
      rabbitmq:
      mongo-orders:
  mongo-orders:
    image: mongo
    volumes:
      - /data/orders
    networks:
      mongo-orders:
  
  warehouse:
    build:
      context: ./warehouse
      dockerfile: Dockerfile
    restart: on-failure
    volumes:
      - ./libs:/libs
    ports:
      - 3003:3000
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
    networks:
      rabbitmq:
      mongo-warehouse:
  mongo-warehouse:
    image: mongo
    volumes:
      - /data/warehouse
    networks:
      mongo-warehouse:

  logistics:
    build:
      context: ./logistics
      dockerfile: Dockerfile
    restart: on-failure
    volumes:
      - ./libs:/libs
    ports:
      - 3004:3000
    depends_on:
      - rabbitmq
    links:
      - rabbitmq
    networks:
      rabbitmq:
      mongo-logistics:
  mongo-logistics:
    image: mongo
    volumes:
      - /data/logistics
    networks:
      mongo-logistics:


networks:
  rabbitmq:
  mongo-customers:
  mongo-orders:
  mongo-warehouse:
  mongo-logistics:
